AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

#Metadata:
#  AWS::ServerlessRepo::Application:
#    Name: CryptoExchangeRates
#    Description: A simple PUT-GET Framework
#    Author: Tyler Reid
#    LicenseUrl: LICENSE
#    ReadmeUrl: README.md
#    Labels: ['some-label']
#    HomePageUrl: https://github.com
#    SemanticVersion: 0.0.1
#    SourceCodeUrl: https://github.com
# s3 sfw-deploy-ufddzmpkg

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  Application:
    Type: String
    Default: ''
  NodeEnv:
    Type: String
    Default: production
  TableName:
    Type: String
    Description: Table Name for DynamoDb Exchange Rates Table
  IsOffline:
    Type: String
  LambdaEndpoint:
    Type: String
  TableEndpoint:
    Type: String
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  ExchangeRateController:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Application}-${ProjectId}-ExchangeRateController-${Stage}'
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: !Sub ${NodeEnv}
          STAGE: !Sub ${Stage}
          LAMBA_FINDEXCHANGERATE:  !Ref FindExchangeRate
          IS_OFFLINE: !Sub ${IsOffline}
          LAMBDA_ENDPOINT: !Sub ${LambdaEndpoint}

      Role:
        Fn::GetAtt:
        - LambdaInvocationRole
        - Arn
      Events:
        GetRate:
          Type: Api
          Properties:
            Path: /exchangerate/{baseCurr}/{date}/{quoteCurr}
            Method: GET
        ListRates:
          Type: Api
          Properties:
            Path: /exchangerate/list
            Method: GET
        UploadRates:
          Type: Api
          Properties:
            Path: /exchangerate
            Method: POST
      Timeout: 5
      CodeUri: src/exchange-rate-controller

  FindExchangeRate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Application}-${ProjectId}-FindExchangeRate-${Stage}'
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: src/find-exchange-rate
      Environment:
        Variables:
          NODE_ENV: !Sub ${NodeEnv}
          STAGE: !Sub ${Stage}
          DYNAMODB_TABLE: !Sub ${TableName}
          DYNAMODB_ENDPOINT: !Sub ${TableEndpoint}
          IS_OFFLINE: !Sub ${IsOffline}
      MemorySize: 128
      Timeout: 3
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: TableName
      AttributeDefinitions:
        - AttributeName:
            Fn::Sub: ${TableName}Id
          AttributeType: S
      KeySchema:
        - AttributeName:
            Fn::Sub: ${TableName}Id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      BillingMode: PAY_PER_REQUEST

  CloudWatchLogExchangeRateController:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub /aws/lambda/${ExchangeRateController}

#  CloudWatchLogFindExchangeRate:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub /aws/lambda/${FindExchangeRate}

  LambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Application}-${ProjectId}-LambdaInvocationRole-${Stage}'
      AssumeRolePolicyDocument:
        Statement:
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - !Sub 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'



