AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar
 # https://github.com/aws/serverless-application-model/blob/develop/versions/2016-10-31.md
#Metadata:
#  AWS::ServerlessRepo::Application:
#    Name: CryptoExchangeRates
#    Description: A simple PUT-GET Framework
#    Author: Tyler Reid
#    LicenseUrl: LICENSE
#    ReadmeUrl: README.md
#    Labels: ['some-label']
#    HomePageUrl: https://github.com
#    SemanticVersion: 0.0.1
#    SourceCodeUrl: https://github.com
# s3 sfw-deploy-ufddzmpkg

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: AllAtOnce
      Role: !Ref CodeDeployRole
    Handler: index.handler
    MemorySize:
      Timeout: 3
    Runtime:
    Tags:
      StageName: !Sub ${Stage}
      Application: !Sub ${Application}

Parameters:
  ProjectId:
    Type: String
    Default: sfw
    Description: AWS CodeStar projectID used to associate new resources to team members
  Application:
    Type: String
    Default: EZSam
    Description: The application name
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Default: Prod
    AllowedValues:
      - Dev
      - Test
      - Prod
    Description: The name for a project pipeline stage, such as Dev, Test, or Prod for which resources are provisioned and deployed.
    ConstraintDescription: Only Dev, Test, or Prod allowed
  LogRetentionDays:
    Type: Number
    Default: 7
    Description: Number of days to retain this stage's logs
  MediaBucketName:
    Type: String
    Default: bucket
    Description: Media Bucket Name for S3
  TableName:
    Type: String
    Description: Table Name for DynamoDB Table
  TableEndpoint:
    Type: String
    Default: ''
  FunctionEndpoint:
    Type: String
    Default: ''

Conditions:
  IsOffline:
    Fn::Equals:
      - !Ref Stage
      - Dev

Resources:
  TranslationHttpApi:
    Type: AWS::Serverless::HttpApi # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-httpapi.html
    Properties:
#      AccessLogSettings:
#        DestinationArn: !GetAtt CloudWatchLogApiGateway.Arn
#        Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.protocol" $context.status $context.responseLength $context.requestId
#        # Auth: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapiauth.html
      CorsConfiguration: true
      DefaultRouteSettings:
        DataTraceEnabled: false
        DetailedMetricsEnabled: false
#        LoggingLevel: OFF
#          ThrottlingBurstLimit: Integer
#          ThrottlingRateLimit: Double
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: resources/open-api.yaml
#        DefinitionUri: String | HttpApiDefinition
      StageName: !Sub ${Stage}
#      StageVariables: Json
#      Tags: Map

  GetTranslationController:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      FunctionName: !Sub ${Application}-${ProjectId}-GetTranslationController-${Stage}
      AutoPublishAlias: live
      CodeUri: src/get-translation-controller
      Description: Get translation
      DeploymentPreference:
        Type: AllAtOnce

      #      DeadLetterQueue:
      #        Type: SNS
      #        TargetArn: arn:aws:sns:us-east-2:123456789012:my-topic
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          REPOSITORY_SERVICE_FUNCTION: !Ref RepositoryService
          FUNCTION_ENDPOINT: !Sub ${FunctionEndpoint}
          IS_OFFLINE: !If [IsOffline, true, false]
      Events:
        GetTranslation:
          Type: HttpApi
          Properties:
            ApiId: !Ref TranslationHttpApi
            Method: GET
            Path: /v1/translation/{source}/{target}/{word}
            PayloadFormatVersion: "2.0"
        ListTranslations:
          Type: HttpApi
          Properties:
            ApiId: !Ref TranslationHttpApi
            Method: GET
            Path: /v1/translation/list
            PayloadFormatVersion: "2.0"
      MemorySize: 128
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref RepositoryService
        - !Ref CloudWatchWritePolicy
      Runtime: nodejs12.x
      Timeout: 3
      Tags:
        StageName: !Sub ${Stage}
        Application: !Sub ${Application}

  UploadTranslationController:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      FunctionName: !Sub '${Application}-${ProjectId}-UploadTranslationController-${Stage}'
      AutoPublishAlias: live
      CodeUri: src/upload-translation-controller
      Description: Upload translations
      DeploymentPreference:
        Type: AllAtOnce
      Handler: index.handler
#      DeadLetterQueue:
#        Type: SNS
#        TargetArn: arn:aws:sns:us-east-2:123456789012:my-topic
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          REPOSITORY_SERVICE_FUNCTION: !Ref RepositoryService
          POLLY_SYNTHESIZER_FUNCTION: !Ref PollySynthesizer
          FUNCTION_ENDPOINT: !Sub ${FunctionEndpoint}
          IS_OFFLINE: !If [IsOffline, true, false]
      Events:
        UploadTranslations:
          Type: HttpApi
          Properties:
            ApiId: !Ref TranslationHttpApi
            Method: POST
            Path: /v1/translation
            PayloadFormatVersion: "2.0"
      MemorySize: 128
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref RepositoryService
        - LambdaInvokePolicy:
            FunctionName: !Ref PollySynthesizer
        - !Ref CloudWatchWritePolicy
      Runtime: nodejs12.x
      Timeout: 10
      Tags:
        StageName: !Sub ${Stage}
        Application: !Sub ${Application}

  RepositoryService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Application}-${ProjectId}-RepositoryService-${Stage}'
      AutoPublishAlias: live
      CodeUri: src/repository-service
      Description: CRUD
      DeploymentPreference:
        Type: AllAtOnce
      Handler: index.handler
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          MEDIA_BUCKET_NAME: !Sub ${MediaBucketName}
          DYNAMODB_TABLE: !Sub ${TableName}
          DYNAMODB_ENDPOINT: !Sub ${TableEndpoint}
          IS_OFFLINE: !If [IsOffline, true, false]
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${TableName}
        - !Ref CloudWatchWritePolicy
      Runtime: nodejs12.x
      Timeout: 3
      Tags:
        StageName: !Sub ${Stage}
        Application: !Sub ${Application}

  PollySynthesizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Application}-${ProjectId}-PollySynthesizer-${Stage}'
      AutoPublishAlias: live
      CodeUri: src/polly-synthesizer
      Description: Synthesizes text to Speech
      DeploymentPreference:
        Type: AllAtOnce
      Handler: index.handler
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          REPOSITORY_SERVICE_FUNCTION: !Ref RepositoryService
          MEDIA_BUCKET_NAME: !Sub ${MediaBucketName}
          FUNCTION_ENDPOINT: !Sub ${FunctionEndpoint}
          IS_OFFLINE: !If [IsOffline, true, false]
      MemorySize: 128
      Policies:
        - S3WritePolicy:
            BucketName: !Sub ${MediaBucketName}
        - PollyFullAccessPolicy:
            LexiconName: '*'
        - !Ref CloudWatchWritePolicy
      Runtime: nodejs12.x
      Timeout: 3
      Tags:
        StageName: !Sub ${Stage}
        Application: !Sub ${Application}

  GetTranslationControllerLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Sub ${LogRetentionDays}
      LogGroupName: !Sub /aws/lambda/${GetTranslationController}

  UploadTranslationControllerLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Sub ${LogRetentionDays}
      LogGroupName: !Sub /aws/lambda/${UploadTranslationController}

  LogRepositoryServiceLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Sub ${LogRetentionDays}
      LogGroupName: !Sub /aws/lambda/${RepositoryService}

  PollySynthesizerLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Sub ${LogRetentionDays}
      LogGroupName: !Sub /aws/lambda/${PollySynthesizer}

#  CloudWatchLogApiGateway:
#    Type: AWS::Logs::LogGroup
#    DependsOn?:
#    Properties:
#      RetentionInDays: !Sub ${LogRetentionDays}

  CloudWatchWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${Application}-${ProjectId}-CloudWatchWritePolicy-${Stage}'
      Description: Policy for writing to Lambda's logs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:PutLogEvents
          Resource: '*'




#Fn::!Equals:
#  - !Equals [IsOffline, true]
#  -
#    Outputs:
#      TranslationHttpApi:
#        Description: API Gateway endpoint URL for Prod stage for Hello World function
#        Value:
#          Fn::Sub: https://${TranslationHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
#      ExpressBackendFunction:
#        Description: Express Backend Lambda Function ARN
#        Value: !Sub TranslationController.Arn