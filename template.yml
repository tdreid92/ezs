AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar
 # https://github.com/aws/serverless-application-model/blob/develop/versions/2016-10-31.md
#Metadata:
#  AWS::ServerlessRepo::Application:
#    Name: CryptoExchangeRates
#    Description: A simple PUT-GET Framework
#    Author: Tyler Reid
#    LicenseUrl: LICENSE
#    ReadmeUrl: README.md
#    Labels: ['some-label']
#    HomePageUrl: https://github.com
#    SemanticVersion: 0.0.1
#    SourceCodeUrl: https://github.com
# s3 sfw-deploy-ufddzmpkg

Parameters:
  ProjectId:
    Type: String
    Default: 'sfw'
    Description: AWS CodeStar projectID used to associate new resources to team members
  Application:
    Type: String
    Default: 'SamFramework'
    Description: The application name
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Default: Prod
    AllowedValues:
      - Dev
      - Test
      - Prod
    Description: The name for a project pipeline stage, such as Dev, Test, or Prod for which resources are provisioned and deployed.
    ConstraintDescription: Only Dev, Test, or Prod allowed
  NodeEnv:
    Type: String
    Default: development
    AllowedValues:
      - development
      - production
    ConstraintDescription: Only development or production allowed. Determines the express Node Environment
  TableName:
    Type: String
    Description: Table Name for DynamoDB Table
  LambdaEndpoint:
    Type: String
    Default: ''
  TableEndpoint:
    Type: String
    Default: ''

Conditions:
  IsOffline: !Equals [!Ref Stage, Dev]

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole
      Tags:
        StageName: !Sub ${Stage}
        Application: !Sub ${Application}

Resources:
  ExchangeRateApi:
    Type: AWS::Serverless::HttpApi # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-httpapi.html
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt CloudWatchLogApiGateway.Arn
        Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] $context.httpMethod $context.resourcePath $context.protocol $context.status $context.responseLength $context.requestId \n
        # Auth: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapiauth.html
        CorsConfiguration: true
        DefaultRouteSettings:
          DataTraceEnabled: false
          DetailedMetricsEnabled: false
          LoggingLevel: OFF
#          ThrottlingBurstLimit: Integer
#          ThrottlingRateLimit: Double
#        DefinitionBody: resources/open-api.yaml
#        DefinitionUri: String | HttpApiDefinition
        Description: Get an exchange rate
        StageName: !Sub ${Stage}
        StageVariables: Json
        Tags: Map
#      DefinitionBody:
#        'Fn::Transform':
#          Name: AWS::Include
#          Parameters:
#            Location: resources/open-api.yaml

#  CommentsBucket:
#    Type: AWS::S3::Bucket

  ExchangeRateController:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      FunctionName: !Sub '${Application}-${ProjectId}-ExchangeRateController-${Stage}'
      Description: REST API to process incoming exchange rate requests
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: src/exchange-rate-controller
#      DeadLetterQueue:
#        Type: SNS
#        TargetArn: arn:aws:sns:us-east-2:123456789012:my-topic
      Environment:
        Variables:
          NODE_ENV: !Sub ${NodeEnv}
          STAGE_NAME: !Sub ${Stage}
          LAMBA_FINDEXCHANGERATE:  !Ref FindExchangeRate
          IS_OFFLINE: !Equals [IsOffline, true]
          LAMBDA_ENDPOINT: !Sub ${LambdaEndpoint}
      Events:
        GetExchangeRate:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExchangeRateApi
            Method: GET
            Path: /exchangerate/{baseCurr}/{date}/{quoteCurr}
        ListExchangeRates:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExchangeRateApi
            Method: GET
            Path: /exchangerate/list
        UploadExchangeRates:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExchangeRateApi
            Method: POST
            Path: /exchangerate
      MemorySize: 128
      Role: !GetAtt LambdaInvocationRole.Arn
      Timeout: 3
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CommentsBucket
      Tags:
        StageName: !Sub ${Stage}
        Application: !Sub ${Application}

  FindExchangeRate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Application}-${ProjectId}-FindExchangeRate-${Stage}'
      Description: Read, write, or update an exchange rate in the database
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: src/find-exchange-rate
#      DeadLetterQueue:
#        Type: SNS
#        TargetArn: arn:aws:sns:us-east-2:123456789012:my-topic
      Environment:
        Variables:
          NODE_ENV: !Sub ${NodeEnv}
          STAGE_NAME: !Sub ${Stage}
          DYNAMODB_TABLE: !Sub ${TableName}
          DYNAMODB_ENDPOINT: !Sub ${TableEndpoint}
          IS_OFFLINE: !If [IsOffline, true, false]
      MemorySize: 128
      Role: !GetAtt LambdaInvocationRole.Arn
      Timeout: 3
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Tags:
        StageName: !Sub ${Stage}
        Application: !Sub ${Application}

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName:
            Fn::Sub: ${TableName}Id
          AttributeType: S
      KeySchema:
        - AttributeName:
            Fn::Sub: ${TableName}Id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: StageName
          Value: !Sub ${Stage}
        - Key: Application
          Value: !Sub ${Application}

  CloudWatchLogExchangeRateController:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub /aws/lambda/${ExchangeRateController}
#      Tags:
#        - Key: StageName
#          Value: !Sub ${Stage}
#        - Key: Application
#          Value: !Sub ${Application}

  CloudWatchLogFindExchangeRate:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub /aws/lambda/${FindExchangeRate}
#      Tags:
#        - Key: StageName
#          Value: !Sub ${Stage}
#        - Key: Application
#          Value: !Sub ${Application}

  CloudWatchLogApiGateway:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub /aws/apigateway/${ApiGatewayApi.arn}
      Tags:
        - Key: StageName
          Value: !Sub ${Stage}
        - Key: Application
          Value: !Sub ${Application}

  LambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Application}-${ProjectId}-LambdaInvocationRole-${Stage}'
      AssumeRolePolicyDocument:
        Statement:
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - !Sub 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
      Tags:
        - Key: StageName
          Value: !Sub ${Stage}
        - Key: Application
          Value: !Sub ${Application}

#Fn::!Equals:
#  - !Equals [IsOffline, true]
#  -
#    Outputs:
#      ExchangeRatesApi:
#        Description: API Gateway endpoint URL for Prod stage for Hello World function
#        Value:
#          Fn::Sub: https://${ExchangeRatesApi}.execute-api.${AWS::Region}.amazonaws.com/
#      ExpressBackendFunction:
#        Description: Express Backend Lambda Function ARN
#        Value: !Sub ExchangeRateController.Arn